package studentGUI;

import studentBackend.CreditCardPayment;
import adminClass.WriteAndReadFile;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;

public class PaymentProgram extends javax.swing.JFrame {

    private double amount;
    private CreditCardPayment payment;
    private String holdBank;
    private String holdCardNumber;
    private String holdDate;
    private String holdAmount;

    /**
     * Creates new form PaymentProgram
     */
    public PaymentProgram() {
        initComponents();
    }

//        public void passData(String bank, String cardNumber, String date, double amount) {
//        this.holdBank = bank;
//        tBank.setText(holdBank);
//
//        this.holdCardNumber = cardNumber;
//        tCardNumber.setText(holdCardNumber);
//
//        this.holdDate = cardNumber;
//        tPaymentDate.setText(holdDate);
//
//        this.holdAmount = cardNumber;
//        tAmount.setText(holdAmount);
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lMainTitle = new javax.swing.JLabel();
        btnCreditCard = new javax.swing.JButton();
        lCommand = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lMainTitle.setFont(new java.awt.Font("Algerian", 1, 48)); // NOI18N
        lMainTitle.setForeground(new java.awt.Color(110, 74, 48));
        lMainTitle.setText("Payment Program");

        btnCreditCard.setBackground(new java.awt.Color(165, 144, 127));
        btnCreditCard.setFont(new java.awt.Font("Stencil", 2, 36)); // NOI18N
        btnCreditCard.setForeground(new java.awt.Color(110, 74, 48));
        btnCreditCard.setText("Credit Card Payment");
        btnCreditCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreditCardActionPerformed(evt);
            }
        });

        lCommand.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lCommand.setText("Only Credit Card Payment is Accepted!");

        btnBack.setBackground(new java.awt.Color(165, 144, 127));
        btnBack.setFont(new java.awt.Font("Stencil", 2, 36)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnBack)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnCreditCard)
                                    .addGap(93, 93, 93))))
                        .addGap(82, 82, 82))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lMainTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lCommand)
                .addGap(31, 31, 31)
                .addComponent(btnCreditCard, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnBack)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean isValidCreditCard(String cardNumber) {
        return cardNumber.matches("[0-9]{16}");
    }

    private boolean isValidExpiryDate(String expiryDate) {
        return expiryDate.matches("(0[1-9]|1[0-2])/[0-9]{2}");
    }

    private boolean isValidCVV(String cvv) {
        return cvv.matches("[0-9]{3}");
    }

    private void btnCreditCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreditCardActionPerformed
        String[] banks = {"CIMB", "Public Bank"};
        int selectedBankIndex = JOptionPane.showOptionDialog(null, "Select your bank:", "Bank Selection",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, banks, banks[0]);

        double paymentForReceipt = 0.00;

        if (selectedBankIndex != JOptionPane.CLOSED_OPTION && selectedBankIndex != banks.length - 1) {
            String bank = banks[selectedBankIndex];

            String cardNumber = JOptionPane.showInputDialog(null, "Enter the card number:");

            if (cardNumber == null) {
                JOptionPane.getRootFrame().dispose();
                return;
            }

            String expiryDate = JOptionPane.showInputDialog(null, "Enter the expiry date:");
            String cvv = JOptionPane.showInputDialog(null, "Enter the CVV:");

            if (isValidCreditCard(cardNumber) && isValidExpiryDate(expiryDate) && isValidCVV(cvv)) {
                Reservation reservation = new Reservation();
                String roomType = reservation.getSelectedRoomType();
                double amount = 0.0;

                switch (roomType) {
                    case "Single Room":
                        amount = 800.0;
                        break;
                    case "Twins Room":
                        amount = 6000.0;
                        break;
                    case "Quadruple Room":
                        amount = 4500.0;
                        break;
                }

                payment = new CreditCardPayment(cardNumber, expiryDate, cvv);

                double roomAmount = payment.getRoomAmount(roomType); // Call the getRoomAmount() method

                //read payment
                List<Object> paymentInfo = new ArrayList<>();
                WriteAndReadFile w = new WriteAndReadFile("payment.txt");
                w.read(paymentInfo);

                for (int i = paymentInfo.size() - 3; i < paymentInfo.size(); i += 3) {
                    paymentForReceipt = (double) paymentInfo.get(i + 1);

                }

                generateReceipt(cardNumber, expiryDate, cvv, "CIMB Bank", paymentForReceipt);
                Receipt receipt = new Receipt();
                receipt.passData(bank, cardNumber, getCurrentDateTime(), roomAmount);
                receipt.setVisible(true);
                dispose();

            } else {
                JOptionPane.showMessageDialog(null, "Invalid credit card details!", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else if (selectedBankIndex == banks.length - 1) { //public bank
            String bank = banks[selectedBankIndex];
            String cardNumber = JOptionPane.showInputDialog(null, "Enter the card number:");

            if (cardNumber == null) {
                JOptionPane.getRootFrame().dispose();
                return;
            }
            String expiryDate = JOptionPane.showInputDialog(null, "Enter the expiry date:");
            String cvv = JOptionPane.showInputDialog(null, "Enter the CVV:");

            if (isValidCreditCard(cardNumber) && isValidExpiryDate(expiryDate) && isValidCVV(cvv)) {
                Reservation reservation = new Reservation();
                String roomType = reservation.getSelectedRoomType();
                double amount = 0.0;

                switch (roomType) {
                    case "Single Room":
                        amount = 800.0;
                        break;
                    case "Twins Room":
                        amount = 600.0;
                        break;
                    case "Quadruple Room":
                        amount = 450.0;
                        break;
                }

                payment = new CreditCardPayment(cardNumber, expiryDate, cvv);

                double roomAmount = payment.getRoomAmount(roomType); // Call the getRoomAmount() method

                //read payment
                List<Object> paymentInfo = new ArrayList<>();
                WriteAndReadFile w = new WriteAndReadFile("payment.txt");
                w.read(paymentInfo);

                for (int i = paymentInfo.size() - 3; i < paymentInfo.size(); i += 3) {
                    paymentForReceipt = (double) paymentInfo.get(i + 1);

                }

                generateReceipt(cardNumber, expiryDate, cvv, "Public Bank", paymentForReceipt);

                Receipt receipt = new Receipt();
                receipt.passData(bank, cardNumber, getCurrentDateTime(), paymentForReceipt);
                receipt.setVisible(true);
                dispose();

            }
        }

    }//GEN-LAST:event_btnCreditCardActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        StudentStatus status = new StudentStatus();
        status.setVisible(true);

        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void generateReceipt(String cardNumber, String expiryDate, String cvv, String bank, double amount) {
        try {
            
            FileWriter writer = new FileWriter("receipt.txt", true);
            writer.write("Payment Receipt\n");
            writer.write("----------------\n");
            writer.write("Bank: " + bank + "\n");
            writer.write("Card Number: " + cardNumber + "\n");
            writer.write("Expiry Date: " + expiryDate + "\n");
            writer.write("CVV: " + cvv + "\n");
            writer.write("Payment Date: " + getCurrentDateTime() + "\n");
            writer.write("Amount Paid: " + amount + "\n");
            writer.write("----------------\n");
            writer.close();

            Receipt receipt = new Receipt();
            receipt.setVisible(true);
            dispose();
           
        } catch (IOException e) {
            System.out.println("An error occurred while generating the receipt: " + e.getMessage());
        }
    }

    private String getCurrentDateTime() {
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return now.format(formatter);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaymentProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaymentProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaymentProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaymentProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaymentProgram().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreditCard;
    private javax.swing.JLabel lCommand;
    private javax.swing.JLabel lMainTitle;
    // End of variables declaration//GEN-END:variables
}

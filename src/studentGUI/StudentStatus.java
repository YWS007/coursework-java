package studentGUI;

import adminClass.WriteAndReadFile;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author acer
 */
public class StudentStatus extends javax.swing.JFrame {

    private DefaultTableModel model = new DefaultTableModel();
    private String[] columns = {"STUDENT ID", "STATUS"};
    private int row;

    /**
     * Creates new form StudentStatus
     */
    public StudentStatus() {
        initComponents();
        model.setColumnIdentifiers(columns);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tID = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        tCommand1 = new javax.swing.JLabel();
        btnPayment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableStatus = new javax.swing.JTable();
        lStudentID = new javax.swing.JLabel();
        lCommand = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSearch.setBackground(new java.awt.Color(165, 144, 127));
        btnSearch.setFont(new java.awt.Font("Stencil", 2, 36)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(110, 74, 48));
        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tCommand1.setFont(new java.awt.Font("Book Antiqua", 1, 24)); // NOI18N
        tCommand1.setText("Enter the student ID that");

        btnPayment.setBackground(new java.awt.Color(165, 144, 127));
        btnPayment.setFont(new java.awt.Font("Stencil", 2, 36)); // NOI18N
        btnPayment.setForeground(new java.awt.Color(110, 74, 48));
        btnPayment.setText("MAKE PAYMENT");
        btnPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentActionPerformed(evt);
            }
        });

        tableStatus.setModel(model);
        tableStatus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableStatusMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableStatus);

        lStudentID.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lStudentID.setText("Student ID : ");

        lCommand.setFont(new java.awt.Font("Book Antiqua", 1, 24)); // NOI18N
        lCommand.setText("You Want To Make Payment > ");

        btnBack.setBackground(new java.awt.Color(165, 144, 127));
        btnBack.setFont(new java.awt.Font("Stencil", 2, 36)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tCommand1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tID, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSearch)
                                .addGap(22, 22, 22))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnPayment)
                                .addGap(62, 62, 62)
                                .addComponent(btnBack)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(tCommand1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lCommand)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lStudentID)
                        .addComponent(tID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPayment)
                    .addComponent(btnBack))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchStudentID = tID.getText(); // Get the student ID from the input field or text box
        String statusFile = "status.txt";
        if (searchStudentID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a student ID to perform the search.");
            return; // Exit the method if the student ID is empty
        }

        try (BufferedReader br = new BufferedReader(new FileReader(statusFile))) {
            String studentID;
            String date;
            String status;
            String code;
            boolean found = false;

            // Initialize the table model
            while ((studentID = br.readLine()) != null
                    && (date = br.readLine()) != null
                    && (status = br.readLine()) != null
                    && (code = br.readLine()) != null) {
                if (studentID.equals(searchStudentID)) {
                    // Add student information to the table model
                    model.addRow(new Object[]{studentID, status});
                    tID.setText("");
                    found = true;
                }
            }
            if (!found) {
                JOptionPane.showMessageDialog(null, "No student record found with the given ID.");
            }
            tableStatus.setModel(model);

        } catch (IOException e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableStatus.getSelectedRow(); // Get the selected row index
        if (selectedRow != -1) { // Check if a row is selected
            String status = (String) tableStatus.getValueAt(selectedRow, 1); // Get the status value of the selected row

            if (status.equals("Approve")) {
                String studentID = (String) tableStatus.getValueAt(selectedRow, 0); // Get the student ID of the selected row


                PaymentProgram paymentProgram = new PaymentProgram();
                paymentProgram.setVisible(true);
                dispose();

                // read payment
                List<Object> statusInfo = new ArrayList<>();
                WriteAndReadFile w = new WriteAndReadFile("status.txt");
                w.read(statusInfo);

                List<Object> roomInfo = new ArrayList<>();
                WriteAndReadFile w2 = new WriteAndReadFile("room.txt");
                w2.read(roomInfo);

                List<Object> paymentInfo = new ArrayList<>();
                WriteAndReadFile w3 = new WriteAndReadFile("payment.txt");
                w3.read(paymentInfo);

                for (int i = 0; i < statusInfo.size(); i += 4) {
                    if (statusInfo.get(i).equals(studentID)) {
                        for (int j = 0; j < roomInfo.size(); j += 5) {
                            if (roomInfo.get(j).equals(statusInfo.get(i + 3))) {
                                double payment = (double) roomInfo.get(j + 1);
                                LocalDate currentDate = LocalDate.now();
                                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                                String formattedDate = currentDate.format(formatter);
                                paymentInfo.add(studentID);
                                paymentInfo.add(payment);
                                paymentInfo.add(formattedDate);
                                w3.write(paymentInfo);
                            }
                        }
                    }
                }

//                PaymentProgram payment = new PaymentProgram();
//                payment.setVisible(true);
//                dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Payment can only be made for records with an 'Approve' status.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to make a payment.");
        }
    }//GEN-LAST:event_btnPaymentActionPerformed

    private void tableStatusMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableStatusMouseReleased
        // TODO add your handling code here:
        int selectedRowIndex = tableStatus.getSelectedRow();
        if (selectedRowIndex != -1) {
            String studentID = tableStatus.getValueAt(selectedRowIndex, 0).toString();
            String status = tableStatus.getValueAt(selectedRowIndex, 1).toString();
        }
    }//GEN-LAST:event_tableStatusMouseReleased

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        TrackApplication track = new TrackApplication();
        track.setVisible(true);

        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentStatus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnPayment;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lCommand;
    private javax.swing.JLabel lStudentID;
    private javax.swing.JLabel tCommand1;
    private javax.swing.JTextField tID;
    private javax.swing.JTable tableStatus;
    // End of variables declaration//GEN-END:variables
}


package adminGUI;

import adminClass.Room;
import adminClass.WriteAndReadFile;
import adminClass.Permission;
import adminClass.Admin;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import studentBackend.FileHandling;


public class PendingApplication extends javax.swing.JFrame {
    private DefaultTableModel model = new DefaultTableModel();
    private DefaultTableModel model2 = new DefaultTableModel();
    private String[] columns = {"ID","Name","Gender","Room Type"};
    private String[] columns2 = {"Room ID","Capacity","Rental","Space Left"};
    private int row, row2;

    /**
     * Creates new form PendingApplication
     */
    public PendingApplication() {
        
        final int WINDOW_WIDTH = 860;
        final int WINDOW_HEIGHT = 650;
        
        model.setColumnIdentifiers(columns);  //set the column name
        model2.setColumnIdentifiers(columns2);  //set the column name
        initComponents();
        
        setTitle("APU HOSTEL");
        setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        bPending = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tRoomType = new javax.swing.JTextField();
        bApprove = new javax.swing.JButton();
        Breject = new javax.swing.JButton();
        bCheckRoomAvailability = new javax.swing.JButton();
        bCheckStudentInformation = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tStudentID = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        printStudentInfo = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tHostelID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        rbOutstanding = new javax.swing.JRadioButton();
        rbRoomNotAvailable = new javax.swing.JRadioButton();
        tCheckIn = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        tRoomID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        rbDuplicate = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mBack = new javax.swing.JMenuItem();
        mLogout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("APU HOSTEL");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Student Application");

        bPending.setText("Pending Application");
        bPending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPendingActionPerformed(evt);
            }
        });

        jLabel2.setText("Room Type :");

        bApprove.setText("Approve");
        bApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bApproveActionPerformed(evt);
            }
        });

        Breject.setText("Reject");
        Breject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrejectActionPerformed(evt);
            }
        });

        bCheckRoomAvailability.setText("Check Available Room");
        bCheckRoomAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCheckRoomAvailabilityActionPerformed(evt);
            }
        });

        bCheckStudentInformation.setText("Check Student Information");
        bCheckStudentInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCheckStudentInformationActionPerformed(evt);
            }
        });

        jLabel3.setText("Student ID :");

        tStudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tStudentIDActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(printStudentInfo);

        jLabel4.setText("Check in date (dd-mm-yyyy) :");

        jLabel5.setText("Hostel :");

        jLabel6.setText("Approve");

        jLabel7.setText("Reject");

        buttonGroup1.add(rbOutstanding);
        rbOutstanding.setText("Outstanding Payment");

        buttonGroup1.add(rbRoomNotAvailable);
        rbRoomNotAvailable.setText("Room not available");

        jTable1.setModel(model);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jLabel8.setText("Room ID :");

        jTable2.setModel(model2);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable2MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        buttonGroup1.add(rbDuplicate);
        rbDuplicate.setText("Duplicate Accplication");

        jMenu1.setText("File");

        mBack.setText("Back");
        mBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBackActionPerformed(evt);
            }
        });
        jMenu1.add(mBack);

        mLogout.setText("Logout");
        mLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLogoutActionPerformed(evt);
            }
        });
        jMenu1.add(mLogout);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bPending)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 781, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(34, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(tHostelID))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(bCheckRoomAvailability))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(bCheckStudentInformation))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Breject, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(164, 164, 164))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbRoomNotAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(107, 107, 107)
                                                .addComponent(bApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(rbOutstanding))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(tCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                                    .addComponent(tRoomID)))
                                            .addComponent(rbDuplicate))
                                        .addGap(0, 0, Short.MAX_VALUE))))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(307, 307, 307))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bPending)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tHostelID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(tRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 5, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(tRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addComponent(bApprove)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbOutstanding)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbRoomNotAvailable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbDuplicate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Breject)
                                .addGap(37, 37, 37))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bCheckStudentInformation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(bCheckRoomAvailability)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //find curretnt date
    public String currentDate() {
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formattedDate = currentDate.format(formatter);
        return formattedDate;
    }
    
    //clear the data in the text after add
    public void cleartextField(){
            tStudentID.setText("");    
            tHostelID.setText("");
            tRoomType.setText("");
            tRoomID.setText("");
            tCheckIn.setText("");
            printStudentInfo.setText("");
    }
    
    //check date format
    public static boolean isValidDate(String dateStr) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        sdf.setLenient(false);

        try {
            Date date = sdf.parse(dateStr);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }
    
    private void bCheckRoomAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCheckRoomAvailabilityActionPerformed
        int rowCount = model2.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model2.removeRow(i);
        }

        Permission p = new Permission();
        p.checkCapacity();
        Room r = new Room();
        r.ReadFromFile("room.txt");
        List<Object> availableRoom = new ArrayList<>();
        WriteAndReadFile data = new WriteAndReadFile("roomAvailability.txt");
        data.read(availableRoom); 
        
        boolean hasAvailableRoom = false; // Flag to track if any room is available
        for(int i=0; i<r.roomInfo.size(); i+=5){
            if((r.roomInfo.get(i+2).equals(tRoomType.getText())) && r.roomInfo.get(i+4).equals(tHostelID.getText())){
                for(int j=0; j<availableRoom.size(); j+=3){
                    if(availableRoom.get(j).equals(r.roomInfo.get(i)) && Integer.parseInt(availableRoom.get(j+1).toString()) != 0){
                        Object[] record = {r.roomInfo.get(i),r.roomInfo.get(i+3), r.roomInfo.get(i+1), availableRoom.get(j+1)};
                        model2.addRow(record);   //in the string array
                        hasAvailableRoom = true; // Set the flag to true
                    } 
                }
            }
        }
        if(!hasAvailableRoom){
            JOptionPane.showMessageDialog(this, "No room available.");
        }
        
    }//GEN-LAST:event_bCheckRoomAvailabilityActionPerformed

    private void bCheckStudentInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCheckStudentInformationActionPerformed
        Admin a = new Admin();
        
        LocalDate currentDate = LocalDate.now(); // Get the current date
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy"); // Define the desired format for the date
        String formattedDate = currentDate.format(formatter); // Format the date using the set format
        
        List<Object> approveInfo = new ArrayList<>();
        WriteAndReadFile w = new WriteAndReadFile("Approve.txt");
        w.read(approveInfo);    //read file
        
        //check student ID
        if(a.checkStudentID(tStudentID.getText())==true){
            //If valid, call accessStudentInfo to store information
            String studentInfo = a.accessStudentInfo(tStudentID.getText());
            printStudentInfo.setText(studentInfo);  //display data
        }
        else{
            //if not found
            JOptionPane.showMessageDialog(this, tStudentID.getText()+" not found.");
        }

        for(int i=0; i<approveInfo.size(); i+=5){
            if(approveInfo.get(i).equals(tStudentID.getText())){
                LocalDate approveDate = LocalDate.parse((String)approveInfo.get(i+1), formatter);
                LocalDate checkOutDate = LocalDate.parse((String)approveInfo.get(i+4), formatter);
                //compare current and checkout date, approve date and current date
                if (approveDate.isBefore(currentDate) && checkOutDate.isAfter(currentDate)) {
                    //if curernt date is after approve and before check out date
                    JOptionPane.showMessageDialog(this, " Duplicate Application");
                }
            }
        }
        
    }//GEN-LAST:event_bCheckStudentInformationActionPerformed

    private void tStudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tStudentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tStudentIDActionPerformed

    private void bApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bApproveActionPerformed
        //makesure the check in date field is not empty and the format is correct
        if(tCheckIn.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Check in date cannot be blanked.");
            return;
        }
        if (!isValidDate(tCheckIn.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid date format.");
            return;
        } 
        
        List<Object> approveInfo = new ArrayList<>();
        List<Object> status = new ArrayList<>();
        WriteAndReadFile w = new WriteAndReadFile("Approve.txt");
        w.read(approveInfo);    //raed data

        WriteAndReadFile w2 = new WriteAndReadFile("status.txt");
        w2.read(status);    //raed data

        String date = currentDate();    //save the current date
        //add data to approveInfo
        approveInfo.add(tStudentID.getText());
        approveInfo.add(date); 
        approveInfo.add(tRoomID.getText());
        approveInfo.add(tCheckIn.getText());
        
        // Assuming tCheckIn.getText() contains a date in the format "dd-MM-yyyy"
        String checkInDateText = tCheckIn.getText();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy"); // Define the desired format for the date
        LocalDate checkInDate = LocalDate.parse(checkInDateText, formatter);
        LocalDate checkInDatePlusOneYear = checkInDate.plusYears(1);   
        String checkInDatePlusOneYearText = checkInDatePlusOneYear.format(formatter);
        approveInfo.add(checkInDatePlusOneYearText);    //check out date is one year after the checkin date
        
        w.write(approveInfo);
        JOptionPane.showMessageDialog(this, "Approved Successful!");
        model.removeRow(row);   //remove the row selected
        
        //add information into  status list
        status.add(tStudentID.getText());
        status.add(date);
        status.add("Approve");
        status.add(tRoomID.getText());
        w2.write(status);   //write data to file
        
        
        Permission p = new Permission();    //create object
        double rentalYearly = p.yearlyRentalCalculate(tRoomID.getText());
        WriteAndReadFile w4 = new WriteAndReadFile("outstanding.txt");
        List<Object> yearlyRental = new ArrayList<>();
        w4.read(yearlyRental);
        yearlyRental.add(tStudentID.getText());
        yearlyRental.add(rentalYearly);
        yearlyRental.add(rentalYearly);
        w4.write(yearlyRental); //add the yearly rental to outstanding txt file
        
        cleartextField();   //clear fields
        model2.setRowCount(0);  // Clear existing rows from the jTable
        
        WriteAndReadFile w3 = new WriteAndReadFile("pending.txt");
        List<Object> clearInfo = new ArrayList<>();
        w3.write(clearInfo);    //clear pending text file
        
    }//GEN-LAST:event_bApproveActionPerformed

    private void bPendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPendingActionPerformed
        List<Object> application = new ArrayList<>();
        WriteAndReadFile data = new WriteAndReadFile("pending.txt");
        data.read(application); //read data from file
        FileHandling f = new FileHandling();    //craete object
        
        ArrayList<String[]> registerInfo = f.convertData(f.readFile("studentData.txt"));
        
        // Clear existing rows from the jTable
        model.setRowCount(0);
        //display the data in a Jtable
        for(int i=0; i<application.size(); i+=6){
            for(String[] str : registerInfo){
                if(application.get(i+1).equals(str[0])){
                    Object[] record = {application.get(i+1),application.get(i), str[2], application.get(i+5)};
                    model.addRow(record);   //in the string array
                }
                
            }
            
        }
        

    }//GEN-LAST:event_bPendingActionPerformed

    private void BrejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrejectActionPerformed
        WriteAndReadFile w = new WriteAndReadFile("status.txt");
        List<Object> approveInfo = new ArrayList<>();
        w.read(approveInfo);    //raed file

        String date = currentDate();    //set current date

        //add data to approveInfo list
        approveInfo.add(tStudentID.getText());
        approveInfo.add(date); // Add the formatted date to the approveInfo list
        approveInfo.add("Reject");
        //reason read from the radio button
        String reason = rbOutstanding.isSelected() ? rbOutstanding.getText() : (rbRoomNotAvailable.isSelected() ? rbRoomNotAvailable.getText() : rbDuplicate.getText());
        approveInfo.add(reason);    
        w.write(approveInfo);   //write to file
        
        JOptionPane.showMessageDialog(this, "Rejected Successful!");
        model.removeRow(row);   //remove the row you selected
        cleartextField();   //clear field
        model2.setRowCount(0);  // Clear existing rows from the jTable
        //clear radio button
        rbOutstanding.setSelected(false);
        rbRoomNotAvailable.setSelected(false);
        rbDuplicate.setSelected(false);
        
        WriteAndReadFile w3 = new WriteAndReadFile("pending.txt");
        List<Object> clearInfo = new ArrayList<>();
        w3.write(clearInfo);    //cleat pending text file
        
    }//GEN-LAST:event_BrejectActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        row = jTable1.getSelectedRow();
        tStudentID.setText(String.valueOf(model.getValueAt(row,0)));
        tRoomType.setText(String.valueOf(model.getValueAt(row,3)));
        String gender = String.valueOf(model.getValueAt(row,2)); 
        if(gender.equals("Female")){
            tHostelID.setText("F1");
        }else{
            tHostelID.setText("M1");
        }
        
    }//GEN-LAST:event_jTable1MouseReleased

    private void jTable2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseReleased
        row2 = jTable2.getSelectedRow();
        tRoomID.setText(String.valueOf(model2.getValueAt(row2,0)));
    }//GEN-LAST:event_jTable2MouseReleased

    private void mBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBackActionPerformed
        AdminInterface adminInterface = new AdminInterface();
        adminInterface.setVisible(true);
        dispose();
    }//GEN-LAST:event_mBackActionPerformed

    private void mLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLogoutActionPerformed
        AdminLoginPage admin = new AdminLoginPage();
        admin.setVisible(true);
        dispose();
    }//GEN-LAST:event_mLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PendingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PendingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PendingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PendingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PendingApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Breject;
    private javax.swing.JButton bApprove;
    private javax.swing.JButton bCheckRoomAvailability;
    private javax.swing.JButton bCheckStudentInformation;
    private javax.swing.JButton bPending;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JMenuItem mBack;
    private javax.swing.JMenuItem mLogout;
    private javax.swing.JTextPane printStudentInfo;
    private javax.swing.JRadioButton rbDuplicate;
    private javax.swing.JRadioButton rbOutstanding;
    private javax.swing.JRadioButton rbRoomNotAvailable;
    private javax.swing.JTextField tCheckIn;
    private javax.swing.JTextField tHostelID;
    private javax.swing.JTextField tRoomID;
    private javax.swing.JTextField tRoomType;
    private javax.swing.JTextField tStudentID;
    // End of variables declaration//GEN-END:variables
}
